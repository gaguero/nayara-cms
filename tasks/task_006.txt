# Task ID: 6
# Title: Implement Authentication in Frontend
# Status: done
# Dependencies: 1, 3
# Priority: high
# Description: Create the authentication provider, hooks, and login page in the React frontend.
# Details:
1. Create AuthProvider in src/providers/AuthProvider.tsx
2. Implement authentication state management with:
   - user object, token, isLoading, isAuthenticated
   - login, logout, checkAuthStatus functions
   - token storage/retrieval using localStorage
3. Create useAuth hook to access authentication context
4. Implement LoginPage in src/features/auth/pages/LoginPage.tsx
5. Create AuthCallbackPage for handling authentication redirects
6. Implement API client with axios in src/lib/api.ts
7. Add interceptors to handle authentication headers and token refresh

# Test Strategy:
Test login functionality with valid and invalid credentials. Verify that authentication state persists across page refreshes. Test token handling and automatic logout on token expiration. Verify that the API client correctly adds authentication headers to requests.

# Subtasks:
## 1. Create API Client with Authentication Interceptors [done]
### Dependencies: None
### Description: Implement the API client using axios with interceptors for authentication headers and token refresh
### Details:
1. Create src/lib/api.ts file
2. Set up axios instance with base URL and default headers
3. Implement request interceptor to add Authorization header with token from localStorage
4. Implement response interceptor to handle 401 errors and attempt token refresh
5. Create helper functions for token storage/retrieval in localStorage
6. Add error handling for network issues
7. Test by making sample API calls with and without authentication

<info added on 2025-04-28T01:48:08.771Z>
```typescript
// Implementation Plan Details

// 1. Token Storage Helpers
export const TokenStorage = {
  getToken: () => localStorage.getItem('auth_token'),
  setToken: (token: string) => localStorage.setItem('auth_token', token),
  removeToken: () => localStorage.removeItem('auth_token'),
  getRefreshToken: () => localStorage.getItem('refresh_token'),
  setRefreshToken: (token: string) => localStorage.setItem('refresh_token', token),
  removeRefreshToken: () => localStorage.removeItem('refresh_token'),
};

// 2. Axios Instance Setup
import axios, { AxiosInstance, AxiosError, AxiosRequestConfig } from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

export const apiClient: AxiosInstance = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// 3. Request Interceptor Example
apiClient.interceptors.request.use(
  (config) => {
    const token = TokenStorage.getToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// 4. Response Interceptor with Refresh Token Logic
let isRefreshing = false;
let failedQueue: any[] = [];

const processQueue = (error: any, token: string | null = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error);
    } else {
      prom.resolve(token);
    }
  });
  failedQueue = [];
};

apiClient.interceptors.response.use(
  (response) => response,
  async (error: AxiosError) => {
    const originalRequest = error.config as AxiosRequestConfig & { _retry?: boolean };
    
    if (error.response?.status === 401 && !originalRequest._retry) {
      if (isRefreshing) {
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        }).then(token => {
          originalRequest.headers!.Authorization = `Bearer ${token}`;
          return apiClient(originalRequest);
        }).catch(err => Promise.reject(err));
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        const refreshToken = TokenStorage.getRefreshToken();
        if (!refreshToken) {
          throw new Error('No refresh token available');
        }
        
        // Call your refresh token endpoint
        const response = await axios.post(`${API_BASE_URL}/auth/refresh`, { 
          refreshToken 
        });
        
        const { token, refreshToken: newRefreshToken } = response.data;
        TokenStorage.setToken(token);
        TokenStorage.setRefreshToken(newRefreshToken);
        
        processQueue(null, token);
        originalRequest.headers!.Authorization = `Bearer ${token}`;
        return apiClient(originalRequest);
      } catch (refreshError) {
        processQueue(refreshError, null);
        TokenStorage.removeToken();
        TokenStorage.removeRefreshToken();
        // Redirect to login or dispatch logout action
        window.location.href = '/login';
        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }
    
    return Promise.reject(error);
  }
);

// 5. Export helper functions for common API operations
export const api = {
  get: <T>(url: string, config = {}) => apiClient.get<T>(url, config),
  post: <T>(url: string, data = {}, config = {}) => apiClient.post<T>(url, data, config),
  put: <T>(url: string, data = {}, config = {}) => apiClient.put<T>(url, data, config),
  delete: <T>(url: string, config = {}) => apiClient.delete<T>(url, config),
};
```
</info added on 2025-04-28T01:48:08.771Z>

## 2. Implement Authentication Context Provider [done]
### Dependencies: 6.1
### Description: Create the AuthProvider component to manage authentication state across the application
### Details:
1. Create src/providers/AuthProvider.tsx file
2. Define AuthContext with user object, token, isLoading, isAuthenticated states
3. Implement login, logout, checkAuthStatus functions using the API client
4. Set up useEffect to check authentication status on initial load
5. Implement token storage/retrieval using localStorage functions from API client
6. Add proper TypeScript interfaces for context values and provider props
7. Test by manually triggering state changes and observing context updates

<info added on 2025-04-28T01:49:22.276Z>
```typescript
// Implementation details for AuthProvider.tsx

// 1. Define interfaces
interface AuthUser {
  id: string;
  username: string;
  email: string;
  // Add other user properties as needed
}

interface AuthContextType {
  user: AuthUser | null;
  token: string | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  checkAuthStatus: () => Promise<boolean>;
}

interface AuthProviderProps {
  children: React.ReactNode;
}

// 2. Create context with default values
const AuthContext = createContext<AuthContextType>({
  user: null,
  token: null,
  isAuthenticated: false,
  isLoading: true,
  login: async () => {},
  logout: () => {},
  checkAuthStatus: async () => false
});

// 3. Example implementation of login function
const login = async (email: string, password: string) => {
  setIsLoading(true);
  try {
    const response = await apiClient.auth.login(email, password);
    const { token, user } = response.data;
    
    apiClient.setAuthToken(token);
    localStorage.setItem('auth_token', token);
    
    setUser(user);
    setToken(token);
    setIsAuthenticated(true);
  } catch (error) {
    console.error('Login failed:', error);
    throw error;
  } finally {
    setIsLoading(false);
  }
};

// 4. Example implementation of checkAuthStatus
const checkAuthStatus = async (): Promise<boolean> => {
  setIsLoading(true);
  const storedToken = localStorage.getItem('auth_token');
  
  if (!storedToken) {
    setIsLoading(false);
    return false;
  }
  
  try {
    apiClient.setAuthToken(storedToken);
    const response = await apiClient.auth.getCurrentUser();
    setUser(response.data.user);
    setToken(storedToken);
    setIsAuthenticated(true);
    setIsLoading(false);
    return true;
  } catch (error) {
    console.error('Token validation failed:', error);
    logout();
    setIsLoading(false);
    return false;
  }
};

// 5. Usage example
export const useAuth = () => useContext(AuthContext);
```
</info added on 2025-04-28T01:49:22.276Z>

## 3. Create useAuth Custom Hook [done]
### Dependencies: 6.2
### Description: Implement a custom hook to easily access authentication context throughout the application
### Details:
1. Create src/hooks/useAuth.ts file
2. Implement useAuth hook that uses useContext to access AuthContext
3. Add proper error handling if hook is used outside AuthProvider
4. Include TypeScript types for return values
5. Add helper methods for common auth operations if needed
6. Test by creating a simple component that uses the hook to display auth state

<info added on 2025-04-28T01:51:09.816Z>
```typescript
// Implementation for src/hooks/useAuth.ts
import { useContext } from 'react';
import { AuthContext, AuthContextType } from '../context/AuthContext';

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  
  return context;
};

// Example usage in a component:
// import { useAuth } from '../hooks/useAuth';
// 
// const ProfilePage = () => {
//   const { user, isAuthenticated, login, logout } = useAuth();
//   
//   if (!isAuthenticated) {
//     return <div>Please log in to view your profile</div>;
//   }
//   
//   return (
//     <div>
//       <h1>Welcome, {user?.name}</h1>
//       <button onClick={logout}>Logout</button>
//     </div>
//   );
// };

// Helper methods you might want to include:
// - isAdmin(): boolean - Check if current user has admin privileges
// - hasPermission(permission: string): boolean - Check if user has specific permission
// - refreshToken(): Promise<void> - Method to refresh the authentication token
```
</info added on 2025-04-28T01:51:09.816Z>

## 4. Implement Login Page Component [done]
### Dependencies: 6.2, 6.3
### Description: Create the login page with form validation and authentication flow
### Details:
1. Create src/features/auth/pages/LoginPage.tsx file
2. Implement login form with username/email and password fields
3. Add form validation using a form library (e.g., Formik, React Hook Form)
4. Connect form submission to login function from useAuth hook
5. Implement loading states during authentication
6. Add error handling and display for failed login attempts
7. Implement redirect logic for authenticated users
8. Test form validation, successful login flow, and error handling

## 5. Create Authentication Callback Page [done]
### Dependencies: 6.2, 6.3
### Description: Implement the callback page for handling authentication redirects from external providers
### Details:
1. Create src/features/auth/pages/AuthCallbackPage.tsx file
2. Extract authentication tokens or codes from URL parameters
3. Use useAuth hook to complete authentication process
4. Implement loading state while processing authentication
5. Add error handling for failed authentication
6. Set up redirect to appropriate page after successful authentication
7. Test with mock authentication redirects to ensure proper token handling

<info added on 2025-04-28T01:57:16.230Z>
For the AuthCallbackPage implementation:

```tsx
// Example implementation for AuthCallbackPage.tsx
import { useEffect, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';

const AuthCallbackPage = () => {
  const [error, setError] = useState<string | null>(null);
  const { processAuthCallback } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  
  useEffect(() => {
    const handleCallback = async () => {
      try {
        // Parse URL parameters
        const params = new URLSearchParams(location.search);
        const code = params.get('code');
        const state = params.get('state');
        const error = params.get('error');
        
        if (error) {
          throw new Error(`Authentication error: ${error}`);
        }
        
        if (!code) {
          throw new Error('No authentication code received');
        }
        
        // Process the authentication callback
        await processAuthCallback(code, state);
        
        // Get intended destination from state or default to home
        const destination = state ? JSON.parse(atob(state)).redirectUrl || '/' : '/';
        navigate(destination, { replace: true });
      } catch (err) {
        console.error('Authentication callback error:', err);
        setError(err instanceof Error ? err.message : 'Authentication failed');
      }
    };
    
    handleCallback();
  }, [location, navigate, processAuthCallback]);
  
  if (error) {
    return (
      <div className="auth-callback-error">
        <h2>Authentication Failed</h2>
        <p>{error}</p>
        <button onClick={() => navigate('/login')}>Return to Login</button>
      </div>
    );
  }
  
  return (
    <div className="auth-callback-loading">
      <LoadingSpinner size="large" />
      <p>Completing authentication, please wait...</p>
    </div>
  );
};

export default AuthCallbackPage;
```

Note: This implementation assumes the `processAuthCallback` method exists in the `useAuth` hook. For testing, you can create mock redirects with URL parameters like `?code=test_code&state=encoded_state_data` to simulate provider callbacks.
</info added on 2025-04-28T01:57:16.230Z>

