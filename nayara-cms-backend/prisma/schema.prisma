// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String   // Will be hashed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  campaigns Campaign[] // Relation to Campaign model
}

model Campaign {
  id          String    @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  contentItems ContentItem[] // Add relation to ContentItem
  planningDocuments PlanningDocument[] // Add relation to PlanningDocument
  mediaAssets       MediaAsset[]       // Relation to MediaAsset model
  mediaRequirements MediaRequirement[] // Relation to MediaRequirement model
}

model ContentItem {
  id          String   @id @default(uuid())
  title       String
  body        String   @db.Text // Use Text type for potentially long content
  contentType String   // E.g., 'article', 'image', 'video', 'post'
  mediaUrl    String?
  status      String   @default("draft") // E.g., 'draft', 'published', 'archived'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade) // Relation to Campaign model
  campaignId  String
}

// Add PlanningDocument model
model PlanningDocument {
  id          String   @id @default(uuid())
  name        String
  description String?
  fileUrl     String   // URL pointing to the stored file
  fileSize    Int      // Size in bytes
  fileType    String   // Mime type
  uploadedAt  DateTime @default(now())
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String

  @@index([campaignId]) // Index for faster lookups by campaign
}

// Add MediaAsset model
model MediaAsset {
  id         String   @id @default(uuid())
  name       String   // Original filename or user-provided name
  url        String   // URL pointing to the stored file (e.g., S3, local path)
  fileSize   Int      // Size in bytes
  mimeType   String   // Mime type (e.g., 'image/jpeg')
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String

  @@index([campaignId])
}

// Add MediaRequirement model
model MediaRequirement {
  id          String   @id @default(uuid())
  title       String
  description String?
  required    Boolean  @default(true) // Whether this media is essential
  status      String   @default("pending") // E.g., 'pending', 'fulfilled', 'optional'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String

  @@index([campaignId])
}
